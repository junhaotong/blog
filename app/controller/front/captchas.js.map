{
    "version": 3,
    "sources": [
        "../../../src/controller/front/captchas.js"
    ],
    "names": [
        "Base",
        "require",
        "Geetest",
        "think",
        "captcha",
        "geetest_id",
        "config",
        "geetest_key",
        "module",
        "exports",
        "newAction",
        "register",
        "then",
        "data",
        "success",
        "session",
        "err",
        "fail",
        "catch",
        "validateCaptchas",
        "fallback",
        "validate",
        "geetest_challenge",
        "post",
        "geetest_validate",
        "geetest_seccode"
    ],
    "mappings": ";;AAAA,MAAMA,OAAOC,QAAQ,YAAR,CAAb;AACA,MAAMC,UAAUD,QAAQ,SAAR,CAAhB;;AAEAE,MAAMC,OAAN,GAAgB,IAAIF,OAAJ,CAAY;AACxBG,gBAAYF,MAAMG,MAAN,CAAa,YAAb,CADY;AAExBC,iBAAaJ,MAAMG,MAAN,CAAa,aAAb;AAFW,CAAZ,CAAhB;;AAKAE,OAAOC,OAAP,GAAiB,cAAcT,IAAd,CAAmB;AAChC;;;;AAIAU,gBAAY;AACR,eAAOP,MAAMC,OAAN,CAAcO,QAAd,CAAuB,IAAvB,EACFC,IADE,CACGC,QAAQ;AACV,gBAAI,CAACA,KAAKC,OAAV,EAAmB;AACf;AACA;AACA;AACA;AACA,qBAAKC,OAAL,CAAa,UAAb,EAAyB,IAAzB;AACA,uBAAO,KAAKD,OAAL,CAAaD,IAAb,CAAP;AACA;AACA;AACH,aATD,MASO;AACH;AACA,qBAAKE,OAAL,CAAa,UAAb,EAAyB,KAAzB;AACA,uBAAO,KAAKD,OAAL,CAAaD,IAAb,CAAP;AACH;AACJ,SAhBE,EAgBAG,OAAO;AACN,mBAAO,KAAKC,IAAL,CAAUD,GAAV,CAAP;AACH,SAlBE,EAmBFE,KAnBE,CAmBIF,OAAO;AACV,mBAAO,KAAKC,IAAL,CAAUD,GAAV,CAAP;AACH,SArBE,CAAP;AAsBH;;AAEKG,oBAAN,GAAyB;AAAA;;AAAA;AACrB,gBAAIC,WAAW,MAAM,MAAKL,OAAL,CAAa,UAAb,CAArB;AACA,mBAAOZ,MAAMC,OAAN,CAAciB,QAAd,CAAuBD,QAAvB,EAAiC;AACpCE,mCAAmB,MAAKC,IAAL,CAAU,mBAAV,CADiB;AAEpCC,kCAAkB,MAAKD,IAAL,CAAU,kBAAV,CAFkB;AAGpCE,iCAAiB,MAAKF,IAAL,CAAU,iBAAV;AAHmB,aAAjC,EAIJX,IAJI,CAIC,mBAAW;AACf,uBAAOE,OAAP;AACH,aANM,EAMJ,eAAO;AACN,uBAAO,KAAP;AACH,aARM,CAAP;AAFqB;AAWxB;AAzC+B,CAApC",
    "file": "../../../src/controller/front/captchas.js",
    "sourcesContent": [
        "const Base = require('../base.js');\nconst Geetest = require('gt3-sdk');\n\nthink.captcha = new Geetest({\n    geetest_id: think.config('geetest_id'),\n    geetest_key: think.config('geetest_key')\n});\n\nmodule.exports = class extends Base {\n    /**\n     * 注册新的captcha\n     * @returns {Promise.<T>|*}\n     */\n    newAction() {\n        return think.captcha.register(null)\n            .then(data => {\n                if (!data.success) {\n                    // 进入 fallback，如果一直进入此模式，请检查服务器到极验服务器是否可访问\n                    // 可以通过修改 hosts 把极验服务器 api.geetest.com 指到不可访问的地址\n                    // 为以防万一，你可以选择以下两种方式之一：\n                    // 1. 继续使用极验提供的failback备用方案\n                    this.session('fallback', true);\n                    return this.success(data);\n                    // 2. 使用自己提供的备用方案\n                    // todo\n                } else {\n                    // 正常模式\n                    this.session('fallback', false);\n                    return this.success(data);\n                }\n            }, err => {\n                return this.fail(err);\n            })\n            .catch(err => {\n                return this.fail(err);\n            })\n    }\n\n    async validateCaptchas() {\n        let fallback = await this.session('fallback');\n        return think.captcha.validate(fallback, {\n            geetest_challenge: this.post('geetest_challenge'),\n            geetest_validate: this.post('geetest_validate'),\n            geetest_seccode: this.post('geetest_seccode')\n        }).then(success => {\n            return success;\n        }, err => {\n            return false;\n        })\n    }\n};\n"
    ]
}