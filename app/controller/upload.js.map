{
    "version": 3,
    "sources": [
        "../../src/controller/upload.js"
    ],
    "names": [
        "Base",
        "require",
        "multer",
        "crypto",
        "fs",
        "multiparty",
        "module",
        "exports",
        "imageAction",
        "upload",
        "dest",
        "single",
        "ctx",
        "req",
        "res",
        "err",
        "fail",
        "success"
    ],
    "mappings": "AAAA,MAAMA,OAAOC,QAAQ,WAAR,CAAb;AACA,MAAMC,SAASD,QAAQ,QAAR,CAAf;AACA,MAAME,SAASF,QAAQ,QAAR,CAAf;AACA,MAAMG,KAAKH,QAAQ,IAAR,CAAX;AACA,MAAMI,aAAaJ,QAAQ,YAAR,CAAnB;;AAEAK,OAAOC,OAAP,GAAiB,cAAcP,IAAd,CAAmB;AAChCQ,kBAAc;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAIC,SAASP,OAAO,EAAEQ,MAAM,SAAR,EAAP,EAA4BC,MAA5B,CAAmC,OAAnC,CAAb;AACAF,eAAO,KAAKG,GAAL,CAASC,GAAhB,EAAqB,KAAKD,GAAL,CAASE,GAA9B,EAAoCC,GAAD,IAAS;AACxC,gBAAIA,GAAJ,EAAS;AACL,uBAAO,KAAKC,IAAL,CAAU,IAAV,EAAgBD,GAAhB,CAAP;AACH,aAFD,MAEO;AACH,uBAAO,KAAKE,OAAL,CAAa,MAAb,CAAP;AACH;AACJ,SAND;AAOH;AAzB+B,CAApC",
    "file": "../../src/controller/upload.js",
    "sourcesContent": [
        "const Base = require('./base.js');\nconst multer = require('multer');\nconst crypto = require('crypto');\nconst fs = require('fs');\nconst multiparty = require('multiparty');\n\nmodule.exports = class extends Base {\n    imageAction() {\n        // console.log(this.ctx.file('image').path);\n        // let file = fs.realpathSync(this.ctx.file('image').path);\n        // let md5 = crypto.createHash('md5');\n        // let imageName = this.ctx.file('image').name + Date.\n        // fs.writeFile('')\n        // console.log(this.config('uploadURL'));\n        // let form = multiparty.Form({\n        //     autoFiles: true,\n        //     uploadDir: this.config('uploadURL')\n        // });\n        // console.log('wocao?');\n        // form.parse(this.ctx.request, (err) => {\n        //     return this.success('test');\n        // });\n\n        var upload = multer({ dest: 'upload/' }).single('image');\n        upload(this.ctx.req, this.ctx.res, (err) => {\n            if (err) {\n                return this.fail(2000, err);\n            } else {\n                return this.success('上传成功');\n            }\n        })\n    }\n};\n"
    ]
}