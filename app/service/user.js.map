{
    "version": 3,
    "sources": [
        "../../src/service/user.js"
    ],
    "names": [
        "moment",
        "require",
        "module",
        "exports",
        "think",
        "Service",
        "constructor",
        "props",
        "User",
        "model",
        "getAdminByUsername",
        "username",
        "user",
        "getUserByUsername",
        "addUser",
        "email",
        "password",
        "avatar",
        "type",
        "status",
        "create_at",
        "Date",
        "format",
        "getUserList",
        "page",
        "userList",
        "getUserByType",
        "getUserByToken",
        "token",
        "checkEmail",
        "getUserbyEmail",
        "id",
        "checkUserName",
        "getUserByUsernameOREmail",
        "query"
    ],
    "mappings": ";;AAAA,MAAMA,SAASC,QAAQ,QAAR,CAAf;;AAEAC,OAAOC,OAAP,GAAiB,cAAcC,MAAMC,OAApB,CAA4B;AACzCC,gBAAYC,KAAZ,EAAmB;AACf,cAAMA,KAAN;AACA,aAAKC,IAAL,GAAY,KAAKC,KAAL,CAAW,MAAX,CAAZ;AACH;AACD;;;;AAIAC,uBAAmBC,QAAnB,EAA6B;AACzB,YAAIC,OAAO,KAAKJ,IAAL,CAAUK,iBAAV,CAA4BF,QAA5B,EAAsC,CAAtC,CAAX;AACA,eAAOC,IAAP;AACH;;AAED;;;;;;;;;AASAE,YAAQH,QAAR,EAAkBI,KAAlB,EAAyBC,QAAzB,EAAmCC,MAAnC,EAA2CC,IAA3C,EAAiDC,MAAjD,EAAyD;AACrD,YAAIP,OAAO;AACPD,oBADO;AAEPI,iBAFO;AAGPC,oBAHO;AAIPC,kBAJO;AAKPG,uBAAWpB,OAAO,IAAIqB,IAAJ,EAAP,EAAmBC,MAAnB,CAA0B,qBAA1B,CALJ;AAMPJ,gBANO;AAOPC;AAPO,SAAX;AASA,eAAO,KAAKX,IAAL,CAAUM,OAAV,CAAkBF,IAAlB,CAAP;AACH;;AAED;;;;;AAKMW,eAAN,CAAkBC,OAAO,CAAzB,EAA4B;AAAA;;AAAA;AACxB,gBAAIC,WAAW,MAAM,MAAKjB,IAAL,CAAUkB,aAAV,CAAwB,CAAxB,EAA2BF,OAAO,EAAlC,CAArB;AACA,mBAAOC,QAAP;AAFwB;AAG3B;;AAED;;;;;AAKME,kBAAN,CAAqBC,KAArB,EAA4B;AAAA;;AAAA;AACxB,gBAAIhB,OAAO,MAAM,OAAKJ,IAAL,CAAUmB,cAAV,CAAyBC,KAAzB,CAAjB;AACA,mBAAOhB,IAAP;AAFwB;AAG3B;;AAED;;;;;AAKMiB,cAAN,CAAiBd,KAAjB,EAAwB;AAAA;;AAAA;AACpB,gBAAIH,OAAO,MAAM,OAAKJ,IAAL,CAAUsB,cAAV,CAAyBf,KAAzB,CAAjB;AACA,gBAAIH,KAAKmB,EAAT,EAAa,OAAO,IAAP,CAAb,KACK,OAAO,KAAP;AAHe;AAIvB;;AAED;;;;;AAKMC,iBAAN,CAAoBrB,QAApB,EAA8B;AAAA;;AAAA;AAC1B,gBAAIC,OAAO,MAAM,OAAKJ,IAAL,CAAUK,iBAAV,CAA4BF,QAA5B,CAAjB;AACA,gBAAIC,KAAKmB,EAAT,EAAa,OAAO,IAAP,CAAb,KACK,OAAO,KAAP;AAHqB;AAI7B;;AAED;;;;;AAKME,4BAAN,CAA+BC,KAA/B,EAAsC;AAAA;;AAAA;AAClC,gBAAItB,OAAO,MAAM,OAAKJ,IAAL,CAAUyB,wBAAV,CAAmCC,KAAnC,CAAjB;AACA,mBAAOtB,IAAP;AAFkC;AAGrC;AAtFwC,CAA7C",
    "file": "../../src/service/user.js",
    "sourcesContent": [
        "const moment = require('moment');\n\nmodule.exports = class extends think.Service {\n    constructor(props) {\n        super(props);\n        this.User = this.model('user');\n    }\n    /**\n     * 通过用户名获取管理员\n     * @param username\n     */\n    getAdminByUsername(username) {\n        let user = this.User.getUserByUsername(username, 2);\n        return user;\n    }\n\n    /**\n     * 新增用户\n     * @param username\n     * @param email\n     * @param password\n     * @param avatar\n     * @param type\n     * @param status\n     */\n    addUser(username, email, password, avatar, type, status) {\n        let user = {\n            username,\n            email,\n            password,\n            avatar,\n            create_at: moment(new Date()).format('YYYY-MM-DD HH:mm:ss'),\n            type,\n            status,\n        };\n        return this.User.addUser(user);\n    }\n\n    /**\n     * 获取用户列表\n     * @param page\n     * @returns {*}\n     */\n    async getUserList(page = 1) {\n        let userList = await this.User.getUserByType(1, page * 20);\n        return userList;\n    }\n\n    /**\n     * 通过token获取用户\n     * @param token\n     * @returns {Promise.<Promise|*>}\n     */\n    async getUserByToken(token) {\n        let user = await this.User.getUserByToken(token);\n        return user;\n    }\n\n    /**\n     * 验证email是否已注册\n     * @param email\n     * @returns {Promise.<boolean>}\n     */\n    async checkEmail(email) {\n        let user = await this.User.getUserbyEmail(email);\n        if (user.id) return true;\n        else return false;\n    }\n\n    /**\n     * 验证用户名是否已注册\n     * @param username\n     * @returns {Promise.<boolean>}\n     */\n    async checkUserName(username) {\n        let user = await this.User.getUserByUsername(username);\n        if (user.id) return true;\n        else return false;\n    }\n\n    /**\n     * 通过用户名或邮箱获取用户\n     * @param query\n     * @returns {Promise.<Promise|*>}\n     */\n    async getUserByUsernameOREmail(query) {\n        let user = await this.User.getUserByUsernameOREmail(query);\n        return user;\n    }\n};\n"
    ]
}